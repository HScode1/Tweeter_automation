generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TweetStatus {
  PENDING
  PUBLISHED
  FAILED
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts        Account[]
  scheduledTweets ScheduledTweet[]
  userToken       UserToken? // âœ… Ajout de la relation avec UserToken

  @@index([email])
}

model Account {
  id        String   @id @default(cuid())
  platform  String   @default("twitter")
  username  String
  token     String // Will be encrypted
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, username])
  @@index([userId])
}

model ScheduledTweet {
  id           String      @id @default(cuid())
  content      String      @db.Text
  scheduledFor DateTime
  status       TweetStatus @default(PENDING)
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  retryCount   Int         @default(0)
  errorMessage String?     @db.Text

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  media   Media[]
  metrics TweetMetrics?

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
}

model Media {
  id        String    @id @default(cuid())
  tweetId   String
  url       String
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  tweet ScheduledTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@index([tweetId])
}

model TweetMetrics {
  id          String   @id @default(cuid())
  tweetId     String   @unique
  impressions Int      @default(0)
  engagements Int      @default(0)
  likes       Int      @default(0)
  retweets    Int      @default(0)
  replies     Int      @default(0)
  lastUpdated DateTime @default(now())

  // Relations
  tweet ScheduledTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@index([tweetId])
}

model UserToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relation avec User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
