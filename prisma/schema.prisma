// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TweetStatus {
  PENDING
  PUBLISHED
  FAILED
  SCHEDULED
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts        Account[]
  scheduledTweets ScheduledTweet[]
  userToken       UserToken?
  preferences     UserPreferences?

  @@index([email])
  @@index([clerkId])
}

model Account {
  id              String    @id @default(cuid())
  platform        String    @default("twitter")
  username        String
  accessToken     String
  refreshToken    String?
  tokenExpiresAt  DateTime?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
}

model ScheduledTweet {
  id          String      @id @default(cuid())
  content     String      @db.Text
  scheduledFor DateTime
  status      TweetStatus @default(PENDING)
  userId      String
  tweetId     String?     // ID du tweet publi√© sur Twitter
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  retryCount  Int         @default(0)
  errorMessage String?    @db.Text
  source      String?     // Source of the tweet (e.g., 'studio', 'scheduler')

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  media   Media[]
  metrics TweetMetrics?

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
}

model Media {
  id        String   @id @default(cuid())
  tweetId   String
  url       String
  type      MediaType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tweet ScheduledTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@index([tweetId])
}

model TweetMetrics {
  id          String   @id @default(cuid())
  tweetId     String   @unique
  impressions Int      @default(0)
  engagements Int      @default(0)
  likes       Int      @default(0)
  retweets    Int      @default(0)
  replies     Int      @default(0)
  lastUpdated DateTime @default(now())

  tweet ScheduledTweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@index([tweetId])
}

model UserToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserPreferences {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone     String?
  tweetsPerPage Int    @default(10)
  sortOrder    String  @default("chrono")
  autoImport   Boolean @default(false)
  importSource String?
}
